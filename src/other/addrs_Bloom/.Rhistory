print("Hello World", quote = FALSE)
name <- "Username"
name <- "Thomas Rush"
greeting <- paste("Welcome ", name, "!")
x
source('~/.active-rstudio-document', echo=TRUE)
name <- readline("Please enter your name: ")
print(greeting)
source('~/.active-rstudio-document')
install.packages("jsonlite")
# A JSON array of primitives
json <- '["Mario", "Peach", null, "Bowser"]'
# Simplifies into an atomic vector
fromJSON(json)
## ----echo=FALSE----------------------------------------------------------
library(knitr)
opts_chunk$set(comment="")
#this replaces tabs by spaces because latex-verbatim doesn't like tabs
#no longer needed because yajl does not use tabs.
#toJSON <- function(...){
#  gsub("\t", "  ", jsonlite::toJSON(...), fixed=TRUE);
#}
## ----message=FALSE-------------------------------------------------------
library(jsonlite)
all.equal(mtcars, fromJSON(toJSON(mtcars)))
## ------------------------------------------------------------------------
# A JSON array of primitives
json <- '["Mario", "Peach", null, "Bowser"]'
# Simplifies into an atomic vector
fromJSON(json)
## ------------------------------------------------------------------------
# No simplification:
fromJSON(json, simplifyVector = FALSE)
## ----echo=FALSE----------------------------------------------------------
library(knitr)
opts_chunk$set(comment="")
#this replaces tabs by spaces because latex-verbatim doesn't like tabs
#no longer needed because yajl does not use tabs.
#toJSON <- function(...){
#  gsub("\t", "  ", jsonlite::toJSON(...), fixed=TRUE);
#}
## ----message=FALSE-------------------------------------------------------
library(jsonlite)
all.equal(mtcars, fromJSON(toJSON(mtcars)))
## ------------------------------------------------------------------------
# A JSON array of primitives
json <- '["Mario", "Peach", null, "Bowser"]'
# Simplifies into an atomic vector
fromJSON(json)
## ------------------------------------------------------------------------
# No simplification:
fromJSON(json, simplifyVector = FALSE)
library(knitr)
opts_chunk$set(comment="")
library(jsonlite)
all.equal(mtcars, fromJSON(toJSON(mtcars)))
json <- '["Mario", "Peach", null, "Bowser"]'
fromJSON(json)
fromJSON(json, simplifyVector = FALSE)
## ----echo=FALSE----------------------------------------------------------
library(knitr)
opts_chunk$set(comment="")
#this replaces tabs by spaces because latex-verbatim doesn't like tabs
#no longer needed because yajl does not use tabs.
#toJSON <- function(...){
#  gsub("\t", "  ", jsonlite::toJSON(...), fixed=TRUE);
#}
## ----message=FALSE-------------------------------------------------------
library(jsonlite)
all.equal(mtcars, fromJSON(toJSON(mtcars)))
## ------------------------------------------------------------------------
# A JSON array of primitives
json <- '["Mario", "Peach", null, "Bowser"]'
# Simplifies into an atomic vector
fromJSON(json)
## ------------------------------------------------------------------------
# No simplification:
fromJSON(json, simplifyVector = FALSE)
## ------------------------------------------------------------------------
json <-
'[
{"Name" : "Mario", "Age" : 32, "Occupation" : "Plumber"},
{"Name" : "Peach", "Age" : 21, "Occupation" : "Princess"},
{},
{"Name" : "Bowser", "Occupation" : "Koopa"}
]'
mydf <- fromJSON(json)
mydf
## ------------------------------------------------------------------------
mydf$Ranking <- c(3, 1, 2, 4)
toJSON(mydf, pretty=TRUE)
## ------------------------------------------------------------------------
json <- '[
[1, 2, 3, 4],
[5, 6, 7, 8],
[9, 10, 11, 12]
]'
mymatrix <- fromJSON(json)
mymatrix
## ------------------------------------------------------------------------
toJSON(mymatrix, pretty = TRUE)
## ------------------------------------------------------------------------
json <- '[
[[1, 2],
[3, 4]],
[[5, 6],
[7, 8]],
[[9, 10],
[11, 12]]
]'
myarray <- fromJSON(json)
myarray[1, , ]
myarray[ , ,1]
install.packages("rjson")
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("readlines")
library("rjson")
json_file <- "http://api.worldbank.org/country?per_page=10&region=OED&lendingtype=LNX&format=json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
readLines
json_file <- "http://api.worldbank.org/country?per_page=10&region=OED&lendingtype=LNX&format=json"
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
thing1 <- readLines(json_file)
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
thing1 <- readLines(json_file)
print thing
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
readLines(json_file)
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
paste(readLines(json_file), collapse="")
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
fromJSON(paste(readLines(json_file), collapse=""))
json_file <- "/Users/jrush/Desktop/dataStore/small.json"
fromJSON(paste(readLines(json_file), collapse=""), simplifyVector = TRUE)
install.packages("csv")
library(jsonlite)
yelp <- fromJSON("yelp_academic_dataset_business.json")
library(jsonlite)
yelp <- fromJSON("/Users/jrush/src.GitHub/data-testing/yelp/yelp_dataset/yelp_academic_dataset_business.json")
library(jsonlite)
yelp <- stream_in(file("/Users/jrush/src.GitHub/data-testing/yelp/yelp_dataset/yelp_academic_dataset_business.json"))
head(yelp, 20)
head(yelp, 20)
head(yelp,10)
clear
cls
head(yelp,10)
str(yelp)
str(yelp)
yelp_flat <- flatten(yelp)
str(yelp_flat)
library(jsonlite)
yelp <- stream_in(file("/Users/jrush/src.GitHub/data-testing/yelp/yelp_dataset/yelp_academic_dataset_business.json"))
yelp_flat <- flatten(yelp)
str(yelp_flat)
yelp_flat <- flatten(yelp)
str(yelp_flat)
library(tibble)
yelp_tbl <- as_data_frame(yelp_flat)
yelp_tbl
yelp_tbl %>% mutate(categories = as.character(categories)) %>% select(categories)
library(magrittr)
yelp_tbl %>% mutate(categories = as.character(categories)) %>% select(categories)
source('~/.active-rstudio-document', echo=TRUE)
library(tibble)
library(tibble)
library(jsonlite)
yelp <- stream_in(file("/Users/jrush/src.GitHub/data-testing/dataStore/etherTip.json"))
library(tibble)
library(tibble)
library(jsonlite)
yelp <- stream_in(file("/Users/jrush/src.GitHub/data-testing/dataStore/etherTip.json"))
source('~/.active-rstudio-document', echo=TRUE)
m <- mutate(categories = as.character(categories))
m <- mutate(categories = as.character(yelp_tbl))
yelp_tbl
yelp_tbl
yelp_tbl.cname
yelp_tbl
View(yelp_tbl)
View(yelp_flat)
View(yelp)
View(yelp)
View(yelp_tbl)
library(Rcpp)
library(tidyverse)
opt <-  theme(legend.position  = "none",
panel.background = element_rect(fill="white", color="black"),
plot.background  = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a1, double a2, double a3, double a4, double a5,
double a6, double a7, double a8, double a9, double a10,
double a11, double a12, double a13, double a14) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) {
x[i] = a1+a2*x[i-1]+ a3*y[i-1]+ a4*pow(fabs(x[i-1]), a5)+ a6*pow(fabs(y[i-1]), a7);
y[i] = a8+a9*x[i-1]+ a10*y[i-1]+ a11*pow(fabs(x[i-1]), a12)+ a13*pow(fabs(y[i-1]), a14);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
a1 <- -0.8
a2 <- 0.4
a3 <- -1.1
a4 <- 0.5
a6 <- -0.1
a5 <- -0.6
a7 <- -0.5
a8 <- 0.8
a9 <- 1.0
a10 <- -0.3
a11 <- -0.6
a12 <- -0.3
a13 <- -1.2
a14 <- -0.3
df <- createTrajectory(10000000, 1, 1, a1, a2, a3, a4, a5, a6,
a7, a8, a9, a10, a11, a12, a13, a14)
mx <- quantile(df$x, probs = 0.05)
Mx <- quantile(df$x, probs = 0.95)
my <- quantile(df$y, probs = 0.05)
My <- quantile(df$y, probs = 0.95)
df %>% filter(x > mx, x < Mx, y > my, y < My) -> df
plot <- ggplot(df) +
geom_point(aes(x, y), shape=46, alpha=0.01, size=0, color="black") +
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
coord_fixed() +
opt
ggsave("strange.png", plot, height = 4, width = 4, units = 'in', dpi = 1200)
Rcpp
library(Rcpp)
bbox()
require(cli)
bbox()
demo_spinners()
list_spinners()
tree()
tree(c(12,1,1,1,101,1))
tree(date_frame(c(12,1,1,1,101,1)))
tree(data_frame(c(12,1,1,1,101,1)))
tree( data.frame (c(12,1,1,1,101,1)))
tree( data.frame (c(12,1)))
tree( data.frame (c(11)))
tree( data.frame (11)
tree( data.frame (11, 12)
tree( data.frame (11, 12))
require(colorspace)
choose_palette()
install.packages("xquartz.macosforge.org")
install.packages("XQuartz")
# Load packages
library(Rcpp)
library(tidyverse)
opt <-  theme(legend.position  = "none",
panel.background = element_rect(fill="black", color="black"),
plot.background  = element_rect(fill="black"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
# Cpp function to build the dataframe according the equations
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a1, double a2, double a3, double a4, double a5,
double a6) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) {
x[i] = 10*a1+(x[i-1]+a2*sin(a3*y[i-1]+a4))*cos(2*M_PI/(13+10*a6))+y[i-1]*sin(2*M_PI/(13+10*a6));
y[i] = 10*a5-(x[i-1]+a2*sin(a3*y[i-1]+a4))*sin(2*M_PI/(13+10*a6))+y[i-1]*cos(2*M_PI/(13+10*a6));
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
# Parameters (change them to create your own mandalaxies)
a1 <- -1.2
a2 <- 0.8
a3 <- -1.2
a4 <- -0.3
a5 <- -0.4
a6 <- 0.7
# Number of points to draw
npoints <- 4000000
# Creation of the data frame
df <- createTrajectory(npoints, 0, 0, a1, a2, a3, a4, a5, a6)
# Plot
plot <- ggplot(df) +
geom_point(aes(x, y), shape=46, alpha=0.01, size=0, color="white") +
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
coord_fixed() + opt
# Do you like it? Save it!
ggsave("choose_a_name.png", plot, height = 5, width = 5, units = 'in')
a3 <- -1.2
a4 <- -0.3
a5 <- -0.8
a6 <- 0.7
# Number of points to draw
npoints <- 4000000
# Creation of the data frame
df <- createTrajectory(npoints, 0, 0, a1, a2, a3, a4, a5, a6)
# Plot
plot <- ggplot(df) +
geom_point(aes(x, y), shape=46, alpha=0.01, size=0, color="white") +
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
coord_fixed() + opt
# Do you like it? Save it!
ggsave("choose_a_name.png", plot, height = 5, width = 5, units = 'in')
---
title: "Shell Rscript"
header-includes: \usepackage{float}
output: html_document
---
> ### Learning Objectives:
> - Invoking and running R scripts as shell scripts
> - Review of shell scripts
> - Execute some scripts
------
## Shell Scripts
A shell script is simply a text file that contains a series of shell
commands that you want to run in sequence.
I'll show you an example of a simple shell script, and then I will describe
how to write a shell script for R.
For this example I'm assuming that you are working with the
[bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)) shell.
This example is based on the file `today.sh`, which is available in the
`scripts/` folder of this tutorial. If you look at the contents of
`today.sh` you should see the following lines:
```bash
#!/bin/bash
echo "The current time and day is"
date
```
Basically, `today.sh` is a script that prints a message and the current's
date information.
When creating a shell script file, you must specify the shell you are using
in the first line of the file. In this case we have: `#!/bin/bash`.
Typically the pound sign `#` is used as a comment line. However, the first
line of a shell script file is a special case. The set of characters `#!`
is often referred to as the __shebang__. The shebang tells the shell what
shell to run the script under (`bash` in this example).
If you try to run the file by simply typing its name on the command line,
you will be disappointed:
```bash
today.sh
-bash: today.sh: command not found
```
Even though `today.sh` is declared as a file that the bash should execute,
the error message indicates that `bash` is not able to find the command.
This issue has to do with the way the `bash` shell finds commands. `bash`
uses an environment variable called `PATH` to find commands. The
`PATH` variable is set to look for commands only in a handful of directories.
To get the shell to find the `today.sh` script, you have two options:
- Add the directory where your shell script file is located to the `PATH`.
- Use an absolute or relative file path to reference your shell script.
We'll choose the second option, by referencing the file in the `scripts/`
directory using the dot operator:
```bash
./today.sh
-bash: ./today.sh: Permission denied
```
Even though the shell did find the script, there's still a problem: we
don't have permission to execute the file. This can be solved quickly by
changing the permissions with the `chmod` command:
```bash
chmod u+x today.sh
```
Now you should be able to run `today.sh` without problems:
```bash
./today.sh
```
--------
## R shell scripts
Now that we've seen how to write a shell script file, we can discuss
how to do something similar with an R script.
Running R from a shell script involves writing a shell script including
R functions and then calls to these functions. For instance, consider the file
`hello` in the `scripts/` directory:
```bash
#!/usr/bin/env Rscript
hello_world <- function(){
cat('hi! I'm an R script\n')
}
hello_world()
```
This script calls the function `hello_world()` which prints a dummy message.
The important thing is the first line of the file containing the shebang
and telling the shell where to find the program (i.e. `Rscript`) to run the
script: `#!/usr/bin/env Rscript`.
The next step is to change the permissions of the file to make it executable:
```bash
chmod u+x hello
```
Assuming that `hello` is in your current directory, you can run it like so:
```bash
./hello
```
### Example: Area of Rectangle
The file `area.txt` in the `scripts/` folder is another shell script that
calculates the area of rectangle of length 3 and width 5:
```bash
#!/usr/bin/env Rscript
len <- 3
width <- 5
area <- len * width
cat("Area of a rectangle:\n")
cat("length = ", len, "\n")
cat("width  = ", width, "\n")
cat("area   = ", area, "\n")
```
After changing the permission of the file:
```bash
chmod u+x area.txt
```
you can execute it like this:
```bash
./area.txt
```
```
Area of a rectangle:
length =  3
width  =  5
area   =  15
```
------
## Passing arguments
If you want to pass arguments to your script, remember to use the function
`commandArgs(trailingOnly = TRUE)`. Here's the same example presented in
the third section `03-script`, although in this case the script file is
called `normal-vector.txt`:
```bash
#!/usr/bin/env Rscript
# Generates a random vector following a normal distribution.
# Values for 'n', 'mean', 'sd' are expected (in that order).
# reading arguments ('n', 'mean', 'sd')
args <- commandArgs(trailingOnly = TRUE)
n <- as.numeric(args[1])
mean <- as.numeric(args[2])
sd <- as.numeric(args[3])
x <- rnorm(n, mean, sd)
cat(x, '\n')
```
Assuming that you change the file permissions, you can run it as:
```bash
./normal-vector.txt 10 5 1
```
```
4.622793 3.62027 4.268408 5.323577 6.735752 6.647538 7.315079 5.048416 5.460435 7.244645
```
------
### Bash R script
Here's one more example, slightly different. In this case we have a
`bash` script that instead of using the command `Script`, it uses the
`R` command. The file is `bash-example.sh`
```bash
#!/bin/bash
# creates a csv file with log-transformed
# variable 'mpg' and 'hp' from data set 'mtcars'
R --slave <<EOF
log_mtcars <- function()
{
log_mpg <- log(mtcars$mpg)
log_hp <- log(mtcars$hp)
logdata <- data.frame(log_mpg, log_hp)
write.csv(logdata, "log-mtcars.csv")
}
log_mtcars()
EOF
```
Now, make this file executable by
```bash
chmod +x bash-example.sh
```
To run the R function included in this file type
```bash
./bash-example.sh
```
------
values = read.csv("ages.csv", header = FALSE)
getwd()
getwd()
setwd("/Users/jrush/src.GitHub/quickBlocks/src/other/addrs/")
getwd()
values = read.csv("ages.csv", header = FALSE)
rows(values)
row(values)
View(values)
values$bucket <- (row(values) / 100) * 100
values$bucket <- floor(row(values) / 100) * 100
values$bucket <- (floor(row(values) / 100) * 100) / 100
library('dplyr')
values %>% group_by(bucket) %>% summarize(mean=mean(dt), sum=sum(dt))
warnings()
values %>% group_by(bucket) %>% summarize(sum=sum(V1))
values %>% group_by(bucket) %>% summarize(mean=mean(V1), sum=sum(V1))
values %>% group_by(bucket) %>% summarize(mean=mean(V1))
values %>% split(.$bucket) %>% map(summary)
