Steps to cross-build quickBlocks under Linux (Debian 8.8 distribution) environment:

-------------------
Requirements:
-------------------

qb@qbdebian:~$ cat /etc/*lea*
PRETTY_NAME="Debian GNU/Linux 8 (jessie)"
NAME="Debian GNU/Linux"
VERSION_ID="8"
VERSION="8 (jessie)"
ID=debian
HOME_URL="http://www.debian.org/"
SUPPORT_URL="http://www.debian.org/support"
BUG_REPORT_URL="https://bugs.debian.org/"

---------------------
Steps
---------------------


1) Install basic development tools:

   >  (sudo) apt-get install build-essential  (as root or with sudo)

2) Install cmake:

   > (sudo) apt-get install cmake  (as root or with sudo)

3) Install git:

   > (sudo) apt-get install git  (as root or with sudo)

4) Install CURL

   > (sudo) apt-get install libcurl3-dev  (as root or with sudo)

4) Install python and its libs:

   > (sudo) apt-get install  python python-dev  (as root or with sudo)

5) Create the workspace folder. At command line execute:

   > cd <USER_DIRECTORY>    (where USER_DIRECTORY is the directory we want to wokr at)
   > mkdir workspace
   > cd workspace
   
 
6) Clone github repository (master branch by default):

   > git clone https://github.com/Great-Hill-Corporation/quickBlocks.git .


7) Do the cmake + make steps

  >  mkdir build
  >  cd build
  >  cmake ../src
  >  make

------------------------------------------------------------- Testing some tools execution -------------------------------------------------------------------------------------------

qb@qbdebian:~/workspace/bin$ ./getTrans

  Not enough arguments presented.

  Usage:    ./getTrans [-f|-t|-v|-h] hash bn.transID bh.transID  
  Purpose:  Retrieve an Ethereum transaction from either QuickBlocks or a running node.
            --note: 'hash' and 'blockHash' must start with '0x'.  
  Where:    
        hash                  one or more hashes of Ethereum transactions, or
        bn.transID            blockNumber.transactionID of one or more Ethereum transactions, or
        bh.transID            blockHash.transactionID of one or more Ethereum transactions
        -f  (or --fromNode)   retrieve the transaction from the running node (from QuickBlocks otherwise)
        -t  (or --trace)      return the trace of the transaction in addition to regular details
        -v  (or --verbose)    set verbose level. Follow with a number to set level (-v0 for silent)
        -h  (or --help)       display this help screen

  Powered by QuickBlocks
qb@qbdebian:~/workspace/bin$ ./sha3

  Not enough arguments presented.

  Usage:    ./sha3 [-o|-t|-v|-h]  
  Purpose:  This is what the program does.
             
  Where:    
        -o  (or --option1)    option one
        -t  (or --thing)      option two
        -v  (or --verbose)    set verbose level. Follow with a number to set level (-v0 for silent)
        -h  (or --help)       display this help screen

  Powered by QuickBlocks
qb@qbdebian:~/workspace/bin$ ./grabABI

  Not enough arguments presented.

  Usage:    ./grabABI [-c|-g|-e|-n|-o|-s|-t|-v|-h] addr  
  Purpose:  Fetches the ABI for a smart contract. Optionally generates C++ source code representing that ABI.
             
  Where:    
        addr                  the address(es) of the smart contract(s) to grab (required)
        -c  (or --canoncial)  convert all types to their canoncial represenation and remove all spaces from display
        -g  (or --generate)   generate C++ code into ':dir' for all functions and events found in the ABI
        -e  (or --encode)     generate the encodings for the functions / events in the ABI
        -n  (or --noconst)    generate encodings for non-constant functions and events only (always true when generating)
        -o  (or --open)       open the ABI file for editing, download if not already present
        -s  (or --silent)     If ABI cannot be acquired, fail silently (useful for scripting)
        -t  (or --test)       generate intermediary files but do not execute the commands
        -v  (or --verbose)    set verbose level. Follow with a number to set level (-v0 for silent)
        -h  (or --help)       display this help screen

  Powered by QuickBlocks
qb@qbdebian:~/workspace/bin$ ./isContract

  Not enough arguments presented.

  Usage:    ./isContract [-d|-n|-v|-h] addr[s]  
  Purpose:  Returns 'true' or 'false' if the given address(es) hold byte code (or displays the code).
             
  Where:    
        addr[s]               a list of Ethereum addresses from which to check for byte code (required)
        -d  (or --display)    display the actual code at the address(es)
        -n  (or --nodiff)     return 'true' if (exactly) two Ethereum addresses have identical code
        -v  (or --verbose)    set verbose level. Follow with a number to set level (-v0 for silent)
        -h  (or --help)       display this help screen

  Powered by QuickBlocks