abiTest argc: 4 [1:eth_test] [2:-s] [3:6] 
abiTest eth_test -s 6 
ethereum test box test...
0. --------------------------------------------------------------------------------
	000.000 test_0                           ==> line: stringify|should be hex prefixed for address|function baz(address)|0x1234|0x0000000000000000000000000000000000001234
testType: decode
testName: should be hex prefixed for address
signature: function baz(address) : function baz(address)
values: 0x1234
expected: 0x0000000000000000000000000000000000001234 : 0x0000000000000000000000000000000000001234
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.001 test_1                           ==> line: stringify|should be hex prefixed for bytes|function baz(bytes)|0x1234|0x1234
testType: decode
testName: should be hex prefixed for bytes
signature: function baz(bytes) : function baz(bytes)
values: 0x1234
expected: 0x1234 : 0x1234
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.002 test_2                           ==> line: ;stringify|should be hex prefixed for bytesN|function baz(bytes32)|0x1234|0x1234
testType: ;stringify
testName: should be hex prefixed for bytesN
signature: function baz(bytes32) : function baz(bytes32)
values: 0x1234
expected: 0x1234 : 0x1234
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.003 test_3                           ==> line: ;stringify|should be a number for uint|function baz(uint)|42|42
testType: ;stringify
testName: should be a number for uint
signature: function baz(uint) : function baz(uint256)
values: 42
expected: 42 : 42
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.004 test_4                           ==> line: ;stringify|should be a number for uintN|function baz(uint8)|42|42
testType: ;stringify
testName: should be a number for uintN
signature: function baz(uint8) : function baz(uint8)
values: 42
expected: 42 : 42
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.005 test_5                           ==> line: ;stringify|should be a number for int|function baz(int)|-42|-42
testType: ;stringify
testName: should be a number for int
signature: function baz(int) : function baz(int256)
values: -42
expected: -42 : -42
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.006 test_6                           ==> line: ;stringify|should be a number for intN|function baz(int8)|-42|-42
testType: ;stringify
testName: should be a number for intN
signature: function baz(int8) : function baz(int8)
values: -42
expected: -42 : -42
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.007 test_7                           ==> line: ;stringify|should work for bool (true)|function baz(bool)|true|true
testType: ;stringify
testName: should work for bool (true)
signature: function baz(bool) : function baz(bool)
values: true
expected: true : true
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.008 test_8                           ==> line: ;stringify|should work for bool (false)|function baz(bool)|false|false
testType: ;stringify
testName: should work for bool (false)
signature: function baz(bool) : function baz(bool)
values: false
expected: false : false
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.009 test_9                           ==> line: ;stringify|should work for address[]|function baz(address[])|0x1234,0x5678|0x00000000000000000000000000000000001234,0x00000000000000000000000000000000005678
testType: ;stringify
testName: should work for address[]
signature: function baz(address[]) : function baz(address[])
values: 0x1234,0x5678
expected: 0x00000000000000000000000000000000001234,0x00000000000000000000000000000000005678 : 0x00000000000000000000000000000000001234,0x00000000000000000000000000000000005678
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.010 test_10                          ==> line: ;stringify|should work for address[2]|function baz(address[2])|0x1234,0x5678|0x00000000000000000000000000000000001234,0x00000000000000000000000000000000005678
testType: ;stringify
testName: should work for address[2]
signature: function baz(address[2]) : function baz(address[2])
values: 0x1234,0x5678
expected: 0x00000000000000000000000000000000001234,0x00000000000000000000000000000000005678 : 0x00000000000000000000000000000000001234,0x00000000000000000000000000000000005678
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.011 test_11                          ==> line: ;stringify|should work for bytes[]|function baz(bytes[])|0x1234,0x5678|0x1234,0x5678
testType: ;stringify
testName: should work for bytes[]
signature: function baz(bytes[]) : function baz(bytes[])
values: 0x1234,0x5678
expected: 0x1234,0x5678 : 0x1234,0x5678
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.012 test_12                          ==> line: ;stringify|should work for bytes[2]|function baz(bytes[2])|0x1234,0x5678|0x1234,0x5678
testType: ;stringify
testName: should work for bytes[2]
signature: function baz(bytes[2]) : function baz(bytes[2])
values: 0x1234,0x5678
expected: 0x1234,0x5678 : 0x1234,0x5678
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.013 test_13                          ==> line: ;stringify|should work for uint[]|function baz(uint[])|[1,2,3]|1,2,3
testType: ;stringify
testName: should work for uint[]
signature: function baz(uint[]) : function baz(uint256[])
values: [1,2,3]
expected: 1,2,3 : 1,2,3
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.014 test_14                          ==> line: ;stringify|should work for uint[3]|function baz(uint[3])|[1,2,3]|1,2,3
testType: ;stringify
testName: should work for uint[3]
signature: function baz(uint[3]) : function baz(uint256[3])
values: [1,2,3]
expected: 1,2,3 : 1,2,3
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.015 test_15                          ==> line: ;stringify|should work for int[]|function baz(int[])|[-1,-2,-3]|-1,-2,-3
testType: ;stringify
testName: should work for int[]
signature: function baz(int[]) : function baz(int256[])
values: [-1,-2,-3]
expected: -1,-2,-3 : -1,-2,-3
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.016 test_16                          ==> line: ;stringify|should work for int[3]|function baz(int[3])|[-1,-2,-3]|-1,-2,-3
testType: ;stringify
testName: should work for int[3]
signature: function baz(int[3]) : function baz(int256[3])
values: [-1,-2,-3]
expected: -1,-2,-3 : -1,-2,-3
passed 'func.doTest(line)' is true
--------------------------------------------------------------------------------
	000.017 test_17                          ==> line: ;stringify|should work for multiple entries|function baz(bool,bool)|true,false|true,false
testType: ;stringify
testName: should work for multiple entries
signature: function baz(bool,bool) : function baz(bool,bool)
values: true,false
expected: true,false : true,false
passed 'func.doTest(line)' is true
...passed

