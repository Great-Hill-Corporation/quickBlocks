decode|decoding uint32|function baz(uint32)|0x000000000000000000000000000000000000000000000000000000000000002a|42
decode|decoding bytes|function baz(bytes)|0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000|0x68656c6c6f20776f726c64
decode|decoding string|function baz(string|0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000|hello world
decode|decoding int32|function baz(int32)|fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe|-2
decode|decoding int64|function baz(int64)|ffffffffffffffffffffffffffffffffffffffffffffffffffffb29c26f344fe|-85091238591234
;it('should fail', function () {
;assert.throws(function () {
;abi.rawDecode([ 'int32' ], new Buffer('ffffffffffffffffffffffffffffffffffffffffffffffffffffb29c26f344fe', 'hex'))
;}, Error)
;
decode|decoding bool,uint32|function baz(bool,uint32)|0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002a|true,42
;decode|decoding bool, uint256[]', function () {
;it('should equal', function () {
;var a = abi.rawDecode([ 'bool', 'uint256[]' ], new Buffer('000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002a', 'hex'))
;assert.equal(a.length, 2)
;assert.equal(a[0], true)
;assert.equal(a[1].length, 1)
;assert.equal(a[1][0].toString(), new BN(42).toString())
;
;decode|decoding uint256[], bool', function () {
;it('should equal', function () {
;var a = abi.rawDecode([ 'uint256[]', 'bool' ], new Buffer('000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002a', 'hex'))
;assert.equal(a.length, 2)
;assert.equal(a[1], true)
;assert.equal(a[0].length, 1)
;assert.equal(a[0][0].toString(), new BN(42).toString())
;
