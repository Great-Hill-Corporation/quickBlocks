stringTest argc: 2 [1:3] 
stringTest 3 
0. Running TestCStr
	000.000 tokenize        ==> Please  	split this sentence into tokens
	000.001 tokenize        ==> split   	this sentence into tokens
	000.002 tokenize        ==> this    	sentence into tokens
	000.003 tokenize        ==> sentence	into tokens
	000.004 tokenize        ==> into    	tokens
	000.005 tokenize        ==> tokens  	

	000.006 nextTokClr      ==> Please  	split|that|sentence|into|tokens
	000.007 nextTokClr      ==> split   	that|sentence|into|tokens
	000.008 nextTokClr      ==> that    	sentence|into|tokens
	000.009 nextTokClr      ==> sentence	into|tokens
	000.010 nextTokClr      ==> into    	tokens
	000.011 nextTokClr      ==> tokens  	

	000.012 base case       ==> This isthe_thing	that matters	and is_upperCase lower case
	000.013 toLower         ==> this isthe_thing	that matters	and is_uppercase lower case
	000.014 toUpper         ==> THIS ISTHE_THING	THAT MATTERS	AND IS_UPPERCASE LOWER CASE
	000.015 toProper        ==> This Isthe_Thing	That Matters	And Is_Uppercase Lower Case

	000.016 base case       ==> This isthe_thing	that matters	and is_upperCase lower case
	000.017 toLower         ==> this isthe_thing	that matters	and is_uppercase lower case
	000.018 toUpper         ==> THIS ISTHE_THING	THAT MATTERS	AND IS_UPPERCASE LOWER CASE
	000.019 toProper        ==> This Isthe_Thing	That Matters	And Is_Uppercase Lower Case

	000.020 base case       ==> | tab[	]AxBBBxBxA tab:	|
	000.021 trim            ==> |tab[	]AxBBBxBxA tab:	|
	000.022 trim lead       ==> |tab[	]AxBBBxBxA tab:	|
	000.023 trim tail       ==> | tab[	]AxBBBxBxA tab:|
	000.024 trim ws         ==> |tab[	]AxBBBxBxA tab:|
	000.025 trim ws ext     ==> |AxBBBxBxA|

	000.026 base case       ==> | tab[	]AxBBBxBxA tab:	|
	000.027 trim            ==> |tab[	]AxBBBxBxA tab:	|
	000.028 trim lead       ==> |tab[	]AxBBBxBxA tab:	|
	000.029 trim tail       ==> | tab[	]AxBBBxBxA tab:|
	000.030 trim ws         ==> |tab[	]AxBBBxBxA tab:|
	000.031 trim ws ext     ==> |AxBBBxBxA|

	000.032 countOf         ==> There are 4 'Bs' in '| tab[	]AxBBBxBxA tab:	|'
	000.033 countOf         ==> There are 4 'is' in 'This isthe_thing that matters and is_upperCase lower case'

	000.034 base case       ==> This is the thing
	000.035 find is         ==> 2
	000.036 contains is     ==> 1
	000.037 find not this   ==> 18446744073709551615
	000.038 not there this  ==> 0
	000.039 there this      ==> 1

	000.040 base case       ==> Target1|Target2|Target3|Target4
	000.041 rev replace     ==> Target1|Target2|Target3|Tartan4
	000.042 rev replace     ==> Target1|Target2|Tartan3|Tartan4
	000.043 rev replace     ==> Target1|Tartan2|Tartan3|Tartan4
	000.044 rev replace     ==> Tartan1|Tartan2|Tartan3|Tartan4

	000.045 base case       ==> Target1|Target2|Target3|Target4
	000.046 rep any         ==> TarXXXXXXXXX1|TarXXXXXXXXX2|TarXXXXXXXXX3|TarXXXXXXXXX4
	000.047 rep any         ==> TarXXXXXXXXX1 |  TarXXXXXXXXX2 |  TarXXXXXXXXX3 |  TarXXXXXXXXX4
	000.048 rep any         ==> TarXXXXXXXXX1-|--TarXXXXXXXXX2-|--TarXXXXXXXXX3-|--TarXXXXXXXXX4
	000.049 rep any         ==> Tar1|Tar2|Tar3|Tar4

	000.050 base case       ==> .desrever gnirts eht si sihT
	000.051 reversed        ==> This is the string reversed.

	000.052 base case       ==> Target1|Target2|Target3|Target4
	000.053 replace         ==> |Target2|Target3|Target4
	000.054 replace         ==> ||Target3|Target4
	000.055 replace         ==> |||Target4
	000.056 replace         ==> |||

	000.057 es1 is empty                     ==> passed 'es1.empty()' is true
	000.058 es1 == ""                        ==> passed 'es1' is equal to '""'
	000.059 es1 == EMPTY                     ==> passed 'es1' is equal to 'EMPTY'
	000.060 es1 == nullStr                   ==> passed 'es1' is equal to 'nullStr'
	000.061 es2 is empty                     ==> passed 'es2.empty()' is true
	000.062 es2 == ""                        ==> passed 'es2' is equal to '""'
	000.063 es2 == EMPTY                     ==> passed 'es2' is equal to 'EMPTY'
	000.064 es2 == nullStr                   ==> passed 'es2' is equal to 'nullStr'
